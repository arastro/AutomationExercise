name: Playwright Tests - Manual

# Ejecutar manualmente desde GitHub Actions
on:
  workflow_dispatch:
    inputs:
      browser:
        description: 'Navegador para ejecutar las pruebas'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      environment:
        description: 'Ambiente de ejecución'
        required: true
        default: 'staging'
        type: choice
        options:
          - qa
          - staging
      headed:
        description: 'Ejecutar con interfaz gráfica (headed mode)'
        required: false
        default: false
        type: boolean

jobs:
  test:
    permissions:
      contents: read
      pages: write
      id-token: write
    timeout-minutes: 60
    runs-on: ubuntu-latest

    env:
      CI: true
      # Esto lo usamos en playwright.config.ts (dotenv) o en tests
      ENVIRONMENT: ${{ github.event.inputs.environment }}

    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Instalar dependencias
      run: npm ci

    - name: Install Playwright browsers (conditional)
      run: |
        BROWSER="${{ github.event.inputs.browser }}"
        if [ "$BROWSER" = "all" ]; then
          npx playwright install --with-deps
        else
          npx playwright install --with-deps "$BROWSER"
        fi

    - name: Set BASE_URL from secrets per environment
      run: |
        if [ "${{ github.event.inputs.environment }}" = "qa" ]; then
          echo "BASE_URL=${{ secrets.BASE_URL_QA }}" >> $GITHUB_ENV
        else
          echo "BASE_URL=${{ secrets.BASE_URL_STAGING }}" >> $GITHUB_ENV
        fi

    - name: Ejecutar pruebas de Playwright
      run: |
        # Construimos flags según inputs
        EXTRA_FLAGS=""
        if [ "${{ github.event.inputs.browser }}" != "all" ]; then
          EXTRA_FLAGS="--project=${{ github.event.inputs.browser }}"
        fi
        if [ "${{ github.event.inputs.headed }}" = "true" ]; then
          EXTRA_FLAGS="$EXTRA_FLAGS --headed"
        fi

        echo "Running: npx playwright test $EXTRA_FLAGS"
        npx playwright test $EXTRA_FLAGS
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1' 

    - name: Instalar Allure CLI
      if: always()
      run: npm i -g allure-commandline@2.21.0 --silent

    - name: Generar reporte Allure
      if: always()
      run: |
        # allure-results es la carpeta por defecto usada por allure-playwright
        npx allure generate allure-results --clean -o allure-report || true

    - name: Upload videos and screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: media
        path: |
          test-results
          videos
          screenshots

    - name: listar reporte Allure
      if: always()
      run: |
        echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
        echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
        ls -la ./allure-report || true

    - name: Subir reporte Allure (HTML)
      if: always()
      uses: actions/upload-pages-artifact@v4
      with:
        path: ./allure-report

    - name: Deploy to GitHub Pages
      if: always()
      uses: actions/deploy-pages@v4
