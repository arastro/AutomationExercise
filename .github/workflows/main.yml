name: Playwright CI/CD Pipeline

on:
  push:
    branches:
      - master
  
  workflow_dispatch:
    inputs:
      browser:
        description: 'Navegador para ejecutar las pruebas'
        required: true
        default: 'chromium'
        type: choice
        options: [chromium, firefox, webkit, all]
      environment:
        description: 'Ambiente de ejecuciÃ³n'
        required: true
        default: 'qa'
        type: choice
        options: [qa, staging]
      headed:
        description: 'Ejecutar con interfaz grÃ¡fica (headed mode)'
        required: false
        default: false
        type: boolean

jobs:
  # ðŸ§© 1. BUILD: Instalar dependencias y preparar el entorno
  build:
    name: Build Project
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Upload project for testing
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            package.json
            package-lock.json
            playwright.config.ts
            tsconfig.json
            fixtures/
            models/
            pages/
            tests/
            utils/

  # ðŸ§ª 2. TEST: Ejecutar pruebas con Playwright
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    needs: build  # espera que el job "build" termine con Ã©xito
    permissions:
      contents: read
    timeout-minutes: 60

    env:
      CI: true
      ENVIRONMENT: ${{ github.event.inputs.environment || 'qa' }}
      BROWSER: ${{ github.event.inputs.browser || 'chromium' }}
      HEADED: ${{ github.event.inputs.headed || 'false' }}

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Descargar artefactos de build
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Instalar dependencias (usa cache)
        run: npm ci --prefer-offline

      - name: Configurar BASE_URL segÃºn entorno
        run: |
          if [ "$ENVIRONMENT" = "qa" ]; then
            echo "BASE_URL=${{ secrets.BASE_URL_QA }}" >> $GITHUB_ENV
          else
            echo "BASE_URL=${{ secrets.BASE_URL_STAGING }}" >> $GITHUB_ENV
          fi

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Instalar navegadores de Playwright
        run: npx playwright install --with-deps

      - name: Ejecutar pruebas Playwright
        run: |
          EXTRA_FLAGS=""
          if [ "$BROWSER" != "all" ]; then
            EXTRA_FLAGS="--project=$BROWSER"
          fi
          if [ "$HEADED" = "true" ]; then
            EXTRA_FLAGS="$EXTRA_FLAGS --headed"
          fi

          echo "Running tests: npx playwright test $EXTRA_FLAGS"
          npx playwright test $EXTRA_FLAGS

      - name: Subir resultados Allure
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Subir media (videos y screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: media
          path: |
            test-results
            videos
            screenshots

  # ðŸ“Š 3. REPORT/DEPLOY: Generar y publicar Allure Report
  report:
    if: always()
    name: Generate & Deploy Allure Report
    runs-on: ubuntu-latest
    needs: test
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Descargar resultados Allure
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Instalar Allure CLI
        run: npm i -g allure-commandline@2.21.0 --silent

      - name: Generar reporte Allure
        run: npx allure generate allure-results --clean -o allure-report || true

      - name: Subir reporte HTML como artefacto
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./allure-report

      - name: Deploy a GitHub Pages
        uses: actions/deploy-pages@v4
